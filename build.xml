<?xml version="1.0" encoding="UTF-8"?>
<!-- Ant build file -->

<project basedir="" default="package-jar" name="VisualizerLauncher"> 
    <!-- Hook into One-Jar project -->
    <property name="one-jar.dir" location="./build_tools/one-jar" />
    <import file="${one-jar.dir}/build.onejar.xml"/>

    <target name="init">
        <property name="build.dir" value="build" />
        <property name="classes.dir" value="${build.dir}/classes" />
        <property name="main.jar" value="${build.dir}/main.jar" />
        <property name="dist.dir" value="dist" />
        <property name="dist.jar" value="${dist.dir}/visualizerLauncher.jar" />

        <path id="library.classpath">
            <fileset dir="lib" />
            <fileset file="log4j2.xml"/>
        </path>
    </target>

    <target name="compile" depends="init, clean-classes">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${classes.dir}" />

        <javac includeantruntime="false" debug="true" 
            destdir="${classes.dir}" 
            srcdir="src"
        >
            <classpath refid="library.classpath" />
        </javac>
    </target>

    <target name="jar" depends="compile">
        <jar destfile="${main.jar}">
            <fileset dir="${classes.dir}" />
            <fileset file="log4j2.xml" />
        </jar>
    </target>

    <target name="mk-dist-dir" depends="init">
        <mkdir dir="${dist.dir}" />
    </target>
        
    <!-- package the application, including 3rd party dependencies, as a single launchable jar file -->
    <!--
      See: http://one-jar.sourceforge.net
    -->
    <target name="package-jar" depends="jar, mk-dist-dir" 
        description="Create single launchable jar file, including 3rd party dependencies"
    >
        <one-jar destfile="${dist.jar}">
            <manifest>
                <attribute name="One-Jar-Main-Class" value="org.genepattern.desktop.VisualizerLauncher" />
            </manifest>
            <main jar="${main.jar}" />
            <!-- include runtime dependencies -->
            <lib>
                <fileset dir="lib" includes="*.jar" />
            </lib>
        </one-jar>
    </target>

    <!-- 
      See: https://bitbucket.org/infinitekind/appbundler
    -->
    <target name="package-macosx-bundle" depends="jar, mk-dist-dir"  
        description="Create launchable Mac OS X application">

        <property environment="env"/>
        <taskdef name="bundleapp"
            classpath="build_tools/appbundler-1.0ea.jar"
            classname="com.oracle.appbundler.AppBundlerTask" />

        <bundleapp outputdirectory="${dist.dir}"
            name="VisualizerLauncher"
            displayname="GenePattern Visualizer Launcher"
            identifier="org.genepattern.desktop.VisualizerLauncher"
            mainclassname="org.genepattern.desktop.VisualizerLauncher"
            classpathref="library.classpath"
        >
            <classpath file="${main.jar}" />
        </bundleapp>

        <!-- must preserve exec flag of Contents/MacOS/JavaAppLauncher --> 
        <zip destfile="${dist.dir}/VisualizerLauncher.app.zip">
            <zipfileset filemode="644" prefix="VisualizerLauncher.app" 
                dir="${dist.dir}/VisualizerLauncher.app" excludes="Contents/MacOS/JavaAppLauncher" />
            <zipfileset filemode="755" prefix="VisualizerLauncher.app/Contents/MacOS" 
                file="${dist.dir}/VisualizerLauncher.app/Contents/MacOS/JavaAppLauncher" />
        </zip>
    </target>

    <target name="dist" depends="mk-dist-dir, package-jar, package-macosx-bundle" />
    
    <target name="sign-bundle" depends="package-macosx-bundle"
        description="sign the Mac OS X application">
        <echo>
Code signing is not integrated into the build script. At the Broad Institute we do something like ...
    /sysman/scratch/teixeira/macsign/macsign.sh \
        -h xcode \
        -a `pwd`/VisualizerLauncher.app.zip \
        -d `pwd`/dist \
        -i /home/unix/genepatt/.ssh/id_rsa_genepatt \
        -u igvrole
        </echo>
    </target>

    <target name="clean-classes" depends="init"
        description="delete compiled .class files">
        <delete failonerror="false">
            <fileset dir="${classes.dir}" includes="**/*.class"/>
        </delete>
    </target>

    <target name="clean" depends="init, clean-classes"
        description="delete generated files">
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
    </target>

</project>

<?xml version="1.0" encoding="UTF-8"?>
<!-- Ant build file -->

<project basedir="" default="package" name="VisualizerLauncher"> 
    <target name="init">
        <property name="build.dir" value="build"/>
        <property name="dist.dir" value="dist" />
        <property name="inclds" value="org/"/>
        <property name="jar.name" value="project-classes.jar" />
        <property name="appfile" value="${dist.dir}/visualizerLauncher.jar"/>

        <path id="library.classpath">
            <fileset id="jar.lib" dir="lib" />
            <fileset file="log4j2.xml"/>
        </path>
    </target>

    <target name="compile" depends="init, clean-classes">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${build.dir}/classes" />

        <javac debug="true" defaultexcludes="true" deprecation="true"
               destdir="${build.dir}/classes" includes="${inclds}" optimize="false" proceed="false"
               srcdir="src">
            <classpath refid="library.classpath" />
        </javac>
    </target>

    <!-- quick way to build the Mac.app bundle, create a classes.jar file to add to the bundle -->
    <target name="jar" depends="compile">
        <jar destfile="${build.dir}/${jar.name}" basedir="${build.dir}/classes" /> 
    </target>

    <!-- package the application, including 3rd party dependencies, as a single launchable jar file -->
    <target name="package" depends="jar"
        description="package the application as a single launchable jar file">
        <mkdir dir="${dist.dir}" />
        <manifestclasspath property="jar.classpath" jarfile="${appfile}">
            <classpath refid="library.classpath" />
        </manifestclasspath>

        <jar basedir="${build.dir}/classes" defaultexcludes="true" excludes="**/*.java" includes="${inclds}"
             jarfile="${appfile}">
            <fileset refid="jar.lib"/>
            <fileset dir="." file="log4j2.xml"/>
            <manifest>
                <attribute name="Main-Class" value="org.genepattern.desktop.VisualizerLauncher"/>
                <attribute name="Class-Path" value="${jar.classpath}"/>
            </manifest>
        </jar>
    </target>

    <!-- 
      See: https://bitbucket.org/infinitekind/appbundler
    -->
    <target name="bundle" depends="package" 
        description="Package jar file for launching as a Mac OS X application">

        <property environment="env"/>
        <taskdef name="bundleapp"
            classpath="build_tools/appbundler-1.0ea.jar"
            classname="com.oracle.appbundler.AppBundlerTask" />

        <bundleapp outputdirectory="${dist.dir}"
            name="VisualizerLauncher"
            displayname="GenePattern Visualizer Launcher"
            identifier="org.genepattern.desktop.VisualizerLauncher"
            mainclassname="org.genepattern.desktop.VisualizerLauncher"
            classpathref="library.classpath">
            <classpath file="${build.dir}/${jar.name}" />
        </bundleapp>

        <zip destfile="${dist.dir}/VisualizerLauncher.app.zip" basedir="${dist.dir}" includes="VisualizerLauncher.app/**" /> 
    </target>

    <target name="sign-bundle" depends="bundle"
        description="sign the Mac application bundle before distributing">

        <echo>
Code signing is not integrated into the build script. At the Broad Institute we do something like ...
    /sysman/scratch/teixeira/macsign/macsign.sh \
        -h xcode \
        -a `pwd`/VisualizerLauncher.app.zip \
        -d `pwd`/dist \
        -i /home/unix/genepatt/.ssh/id_rsa_genepatt \
        -u igvrole
        </echo>
    </target>

    <target name="clean-classes" depends="init"
        description="delete compiled .class files">
        <delete failonerror="false">
            <fileset dir="build" includes="**/*.class"/>
        </delete>
    </target>

    <target name="clean" depends="init, clean-classes"
        description="delete generated files">
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
    </target>

</project>
